name: Build MikaKernel


on:
  workflow_dispatch:


jobs:
  build-kernel:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup environment
        run: |
          echo "ANYKERNEL_SOURCE=$(cat config.env | grep -w "ANYKERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "ANYKERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "ANYKERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE=$(cat config.env | grep -w "KERNEL_SOURCE" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_SOURCE_BRANCH=$(cat config.env | grep -w "KERNEL_SOURCE_BRANCH" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "KERNEL_CONFIG=$(cat config.env | grep -w "KERNEL_CONFIG" | head -n 1 | cut -d "=" -f 2)" >> $GITHUB_ENV
          echo "BUILD_ARGS=$(cat config.env | grep -w "BUILD_ARGS" | head -n 1 | cut -d ":" -f 2)" >> $GITHUB_ENV

      - name: Pull toolchain
        run: |
          sudo apt update;sudo apt install python2 python3 bsdtar -y
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9 ~/gcc64
          git clone --depth=1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_arm_arm-linux-androideabi-4.9 ~/gcc32
          git clone --depth=1 https://gitlab.com/LeCmnGend/clang.git -b clang-19 ~/clang;wget https://raw.githubusercontent.com/Asteroidd21/gki-builder/refs/heads/master/tc_patch.sh;bash tc_patch.sh ~/clang
          
      - name: Pull kernel source
        run: |
          git clone --depth=1 ${{ env.KERNEL_SOURCE }} -b ${{ env.KERNEL_SOURCE_BRANCH }} ~/kernel-source

      - name: Build kernel
        run: |
          export KBUILD_BUILD_USER="${{ github.actor }}"
          export KBUILD_BUILD_HOST="${{ github.run_id }}"
          export LOCALVERSION="-SEKKKS_KKKERNEL-susfs"
          echo $KBUILD_BUILD_USER
          echo $KBUILD_BUILD_HOST
          echo -e "done?"
          sleep 5s
          export PATH=~/clang/bin:${PATH}
          clang -v
          args="                  ARCH=arm64 \
                                  O=~/out \
                                  HEADER_ARCH=arm64 \
                                  SUBARCH=arm64 \
                                  CXX=c++ \
                                  AR=llvm-ar \
                                  NM=llvm-nm \
                                  OBJDUMP=llvm-objdump \
                                  STRIP=llvm-strip \
                                  READELF=llvm-readelf \
                                  HOSTCXX=clang++ \
                                  HOSTAR=llvm-ar \
                                  LLVM_IAS=1 \
                                  CLANG_TRIPLE=aarch64-linux-gnu- \
                                  CROSS_COMPILE=~/gcc64/aarch64-linux-android- \
                                  CROSS_COMPILE_ARM32=~/gcc32/arm-linux-androideabi- "
          cd ~/kernel-source
          git clone https://github.com/Mayuri-Chan/KernelSU-Next-backup -b next-susfs-4.9 KernelSU-Next
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b kernel-4.9
          cd susfs4ksu
          cp kernel_patches/fs/* ~/kernel-source/fs/
          cp kernel_patches/include/linux/* ~/kernel-source/include/linux/
          cd ..
          make CC=clang ${args} ${{ env.KERNEL_CONFIG }}
          make CC=clang LLVM=1 -j$(($(getconf _NPROCESSORS_ONLN) * 2)) ${args}

      - name: Package kernel
        run: |
          git clone --depth=1 ${{ env.ANYKERNEL_SOURCE }} -b ${{ env.ANYKERNEL_SOURCE_BRANCH }} AnyKernel3 && rm -rf AnyKernel3/.git AnyKernel3/.github AnyKernel3/LICENSE AnyKernel3/README.md
          if [[ -f ~/out/arch/arm64/boot/Image.gz-dtb ]]; then
            cp ~/out/arch/arm64/boot/Image.gz-dtb AnyKernel3/Image.gz-dtb
          elif [[ -f ~/out/arch/arm64/boot/Image-dtb ]]; then
            cp ~/out/arch/arm64/boot/Image-dtb AnyKernel3/Image-dtb
          elif [[ -f ~/out/arch/arm64/boot/Image.gz ]]; then
            cp ~/out/arch/arm64/boot/Image.gz AnyKernel3/Image.gz
          elif [[ -f ~/out/arch/arm64/boot/Image ]]; then
            cp ~/out/arch/arm64/boot/Image AnyKernel3/Image
          fi
          if [ -f ~/out/arch/arm64/boot/dtbo.img ]; then
            cp ~/out/arch/arm64/boot/dtbo.img AnyKernel3/dtbo.img
          fi

      - name: Upload kernel to artifact
        uses: actions/upload-artifact@v4
        with:
          name: output_kernel
          path: AnyKernel3/*
